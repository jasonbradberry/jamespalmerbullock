---
import { type CollectionEntry, getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';
import Button from '../../components/Button.astro';
import FormattedDate from '../../components/FormattedDate.astro';
import PostPreviewSmall from '../../components/PostPreviewSmall.astro';
import { sortItemsByDateDesc } from '../../utils/data-utils';
import { slugify } from '../../utils/common-utils';

export async function getStaticPaths() {
    const posts = (await getCollection('stories')).sort(sortItemsByDateDesc);
    const postCount = posts.length;
    return posts.map((post, index) => ({
        params: { slug: post.slug },
        props: {
            post,
            prevPost: index + 1 !== postCount ? posts[index + 1] : null,
            nextPost: index !== 0 ? posts[index - 1] : null
        }
    }));
}

type Props = { post: CollectionEntry<'stories'>; prevPost: CollectionEntry<'stories'>; nextPost: CollectionEntry<'stories'> };

const { href } = Astro.url;
const { post, prevPost, nextPost } = Astro.props;
const { title, name, relationship, publishDate, excerpt, images, tags = [], seo } = post.data;
const { Content } = await post.render();
---

<BaseLayout title={seo?.title ?? title} description={seo?.description ?? excerpt} image={seo?.image} pageType="article" showHeader={true}>
    <article class="mb-16 sm:mb-24">
        <header class="mb-16">
            <h1 class="text-3xl leading-tight font-serif font-medium sm:text-5xl sm:leading-tight border-b border-main pb-4">{title}</h1>
            <div class="flex flex-col gap-2 sm:gap-8 sm:flex-row mt-4 text-sm">
                <FormattedDate date={publishDate} />
                {name && <span>Shared by {name.trim()}</span>}
            </div>
            <div class="flex flex-col gap-2 sm:gap-8 sm:flex-row mt-2 text-sm">
                {
                    relationship && (
                        <span>
                            <em>How do you know James?</em>
                        </span>
                        <span>
                            {relationship.trim()}
                        </span>
                    )
                }
            </div>
        </header>
        <div class="max-w-none prose prose-dante sm:prose-lg">
            <Content />
        </div>
        {
            images && images.length > 0 && (
                <div class="mt-16">
                    {images.map((img) => (
                        <img src={`/${img}`} alt="" class="mb-8 sm:mb-12" />
                    ))}
                </div>
            )
        }
        <div class="mt-16 flex flex-wrap items-center gap-6 text-sm justify-between sm:text-base">
            {
                tags.length > 0 && (
                    <div class="flex flex-wrap gap-x-5 gap-y-1 text-sm">
                        {tags.map((tag) => (
                            <a class="text-main hover:underline" href={`/tags/${slugify(tag)}`}>
                                #{tag}
                            </a>
                        ))}
                    </div>
                )
            }
            <Button class="copy-url-button" aria-label="Copy link" data-url={href} data-tooltip-default="Copy link" data-tooltip-success="Link copied"
                >Copy link to share</Button
            >
        </div>
    </article>
    {
        (prevPost || nextPost) && (
            <div class="my-16 sm:my-24">
                {nextPost && (
                    <>
                        <h2 class="mb-8 text-sm font-sans tracking-normal">Next story:</h2>
                        <PostPreviewSmall post={nextPost} class="mb-10 sm:mb-12" headingLevel="h3" />
                    </>
                )}
                {prevPost && (
                    <>
                        <h2 class="mb-8 text-sm font-sans tracking-normal">Previous story:</h2>
                        <PostPreviewSmall post={prevPost} class="mb-10 sm:mb-12" headingLevel="h3" />
                    </>
                )}
            </div>
        )
    }
</BaseLayout>

<script>
    document.addEventListener('astro:page-load', () => {
        const copyUrlButton = document.querySelector('.copy-url-button') as HTMLButtonElement;
        copyUrlButton?.addEventListener('click', async () => {
            await copyUrl(copyUrlButton);
        });

        async function copyUrl(button: HTMLButtonElement) {
            let url = button.getAttribute('data-url') || '';
            let label = button.innerText;

            await navigator.clipboard.writeText(url);

            button.innerText = 'Link copied';

            setTimeout(() => {
                button.innerText = label;
            }, 2500);
        }
    });
</script>
